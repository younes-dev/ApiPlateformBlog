<?php

declare(strict_types = 1);

namespace App\Tests\Unit;
use App\Entity\Article;
use App\Entity\User;
use PHPUnit\Framework\TestCase;

class UserTest extends TestCase {

    private $user;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        // inisialiser l'objet User
        $this->user =new User();
    }

    public function assertInstOf($var):void
    {
        self::assertInstanceOf(User::class, $var);
    }

    public function testGetEmail(): void
    {
        $value= 'younes@gmail.com';
        $setEmail=$this->user->setEmail($value);
        $getEmail=$this->user->getEmail();
        $this->assertInstOf($setEmail);
        self::assertEquals($value,$getEmail);
        self::assertEquals($value,$this->user->getUserName());

    }

    public function testGetRoles(): void
    {
        $value= ['ROLE_ADMIN'];
        $setRoles=$this->user->setRoles($value);

        $this->assertInstOf($setRoles);
        self::assertContains('ROLE_USER',$this->user->getRoles());
        self::assertContains('ROLE_ADMIN',$this->user->getRoles());
    }

    public function testGetPassword(): void
    {
        $value= 'password';
        $password=$this->user->setPassword($value);

        $this->assertInstOf($password);
//        self::assertContains($value,$this->user->getPassword());
        self::assertStringContainsString($value,$this->user->getPassword());
    }

    public function testGetArticle(): void
    {
        $value= new Article();
        $article = $this->user->addArticle($value);

        $this->assertInstOf($article);
        self::assertCount(1,$this->user->getArticles());
        self::assertTrue($this->user->getArticles()->contains($value));

        $article = $this->user->removeArticle($value);
        $this->assertInstOf($article);
        self::assertCount(0,$this->user->getArticles());
        self::assertFalse($this->user->getArticles()->contains($value));

    }

}
